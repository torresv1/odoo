# CREATE A VARIABLE
r-foo <- c(3,5,7,9)
p-foo = (3,5,7,9)

# PRINT THE VARIABLE
rp-foo

# PLAY WITH THE VARIABLE
rp-foo[2]
rp-foo[0]
rp-foo[1]

# READ IN A EXCEL FILE
r-simple <- read.csv("C:/Users/torresv1/Google Drive/Personal/Education/Rutgers/Courses/Business Forecasting/Classes/simple.csv")
p-simple = pandas.read_csv("C:/Users/torresv1/Google Drive/Personal/Education/Rutgers/Courses/Business Forecasting/Classes/simple.csv")

# VIEW THE EXCEL FILE
r-View(simple)
p-not_found

# SAVE TO A NEW VARIABLE
r-trial <- simple
p-trial = simple

# PRINT OUT THE VAIRABLE
r-trial
p-trial

# GET THE COLUMN NAMES
r-names(trial)
p-list(trial)

# PRINT A COLUMN FROM THE "SHEET"
r-trial$trial
r-trial$mass
r-trial$velocity
p-trail['trial']
p-trail['mass']
p-trail['velocity']

# A USEFUL FUNCTION 
r-attributes(trial)
p-not_found

# GIVES WHAT TYPE OF VARIABLE IT IS
r-class(trial)
p-type(trial)

# GIVE ME THE SUMMARY OF THE EXCEL FILE
r-summary(trial)
p-trial.describe()

# R COMES WITH SOME PRELOADED DATA SETS. LET SEE WHAT ONE LOOK LIKE
r-mtcars
p-1st method:problems installing rpy2-(couldn't make win32api to work)
p-2nd method:using statsmodels.api as sm (sm.datasets.get_rdataset("mtcars") or data = sm.datasets.longley.load_pandas()-longley is a dataset. 
  However, can't transform the dataset into a dataframe. 

# READ THE HELP FILE TO GET TO KNOW MORE ABOUT THE DATASET
r-?mtcars
p-not_found

# LETS CREATE A HISTOGRAM
r-hist(mtcars$mpg)
p-matplotlib.pyplot.hist(mtcars['mpg'])
p-matplotlib.pyplot.show()	

# Colored Histogram with Different Number of Bins
r-hist(mtcars$mpg, breaks=12, col="red")
p-matplotlib.pyplot.hist(mtcars['mpg'],bins=12,color='red')
p-matplotlib.pyplot.title('Histogram of mtcars["mpg"]')
p-matplotlib.pyplot.show()	

# HELP CAN BE USED WITH ANY FUNCTIONS
r-help(hist)
p-help(matplotlib.pyplot.hist)  or matplotlib.pyplot.hist?? 

# Colored Histogram with Different Number of Bins
r-hist(mtcars$mpg, breaks=8, col="red")
p-matplotlib.pyplot.hist(mtcars['mpg'],bins=8,color='red')
p-matplotlib.pyplot.title('Histogram of mtcars["mpg"]')
p-matplotlib.pyplot.show()	

# LETS SAVE THE COLUMN TO A NEW VARIABLE SO WE CAN USE SHORTER NAME
r-x <- mtcars$mpg
p-x = mtcars["mpg"]

# LETS SAVE THE HISTOGRAM TO A NEW VARIABLE H
# SEE HOW YOU CAN LABEL YOUR GRAPHS!
r-h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",main="Histogram with Normal Curve")
p-h = plt.hist(x, bins=10, color="red")
p-plt.title("Histogram with Normal Curve")
p-plt.xlabel("Miles per Gallon")
p-plt.ylabel("Frequency")

# Kernel Density Plot
r-d <- density(mtcars$mpg) # returns the density data
r-plot(d) # plots the results
p-d = x.plot(kind='kde')
p-fig = d.get_figure()
p-plt.show()

# Simple Dotplot
r-dotchart(mtcars$mpg,labels=row.names(mtcars),cex=.7,main="Gas Milage for Car Models", xlab="Miles Per Gallon")
p-d = mtcars['mpg'].plot(kind='barh')
p-d.set_title ('Gas Milage for Car Models')
p-d.set_yticklabels(mtcars['brand'])
p-d.set_xlabel('Miles per gallon')
p-d.tick_params(axis='both', which='major', labelsize=6)
p-fig = d.get_figure()
p-plt.show()

# WHAT IS CEX?? LETS CHECK THE HELP PAGE
r-help(dotchart)
p-help(plt.plot) or plt.plt??

# WHAT HAPPENS WHEN WE TAKE CEX OFF??
r-dotchart(mtcars$mpg,labels=row.names(mtcars),main="Gas Milage for Car Models",xlab="Miles Per Gallon")
p-d = mtcars['mpg'].plot(kind='barh')
p-d.set_title ('Gas Milage for Car Models')
p-d.set_yticklabels(mtcars['brand'])
p-d.set_xlabel('Miles per gallon')
p-fig = d.get_figure()
p-plt.show()


# LETS ADD IT BACK!
r-dotchart(mtcars$mpg,labels=row.names(mtcars),cex=.7,main="Gas Milage for Car Models",xlab="Miles Per Gallon")
p-d = mtcars['mpg'].plot(kind='barh')
p-d.set_title ('Gas Milage for Car Models')
p-d.set_yticklabels(mtcars['brand'])
p-d.set_xlabel('Miles per gallon')
p-d.tick_params(axis='both', which='major', labelsize=6)
p-fig = d.get_figure()
p-plt.show()

# Simple Bar Plot
r-counts <- table(mtcars$gear)
p-counts = mtcars['gear'].value_counts()
r-?table

#PRINT THE COUNTScounts
r-barplot(counts, main="Car Distribution", xlab="Number of Gears")
p-d = counts.plot(find='bar')
p-d.set_title('Car Distribution')
p-d.set_xlabel('Number of Gear')
p-fig = d.get_figure()
p-plt.show()

# Simple Horizontal Bar Plot with Added Labels
r-barplot(counts, main="Car Distribution", horiz=TRUE,names.arg=c("3 Gears", "4 Gears", "5 Gears"))
p-d = counts.plot(kind='barh')
p-d.set_title('Car Distribution')
p-d.set_xlabel('Number of Gear')
p-d.set_yticklabels(('3 Gears','4 Gears','5 Gears'),rotation=0)
p-fig = d.get_figure()
p-plt.show()


# Simple Pie Chart
r-slices <- c(10, 12,4, 16, 8)
r-lbls <- c("US", "UK", "Australia", "Germany", "France")
r-pie(slices, labels = lbls, main="Pie Chart of Countries")
p-slices = [10, 12,4, 16, 8]
p-labels = ["US", "UK", "Australia", "Germany", "France"]
p-plt.pie(slices, labels=labels)
p-plt.title("Pie Chart of Countries")
p-plt.show()

# ADD LABELS TO PIE CHART
r-pct <- round(slices/sum(slices)*100)
r-lbls <- paste(lbls, pct) # add percents to labels
r-lbls <- paste(lbls,"%",sep="") # ad % to labels
r-pie(slices,labels = lbls, col=rainbow(length(lbls)),main="Pie Chart of Countries")
p-slices = [10, 12,4, 16, 8]
p-labels = ["US", "UK", "Australia", "Germany", "France"]
p-plt.pie(slices, labels=labels, ,autopct='%.0f%%')
p-plt.title("Pie Chart of Countries")
p-plt.show()

# Boxplot of MPG by Car Cylinders
r-boxplot(mpg~cyl,data=mtcars, main="Car Milage Data", xlab="Number of Cylinders", ylab="Miles Per Gallon")
p-mtcars = ( mtcars.groupby(mtcars['mpg'] )['cyl'] )  # the 1st field is the one I group by and the 2nd the one to get the statistics
p-test = []
p-for name, group in survey:
p-     test.append( group )
p-plt.boxplot( test)
p-plt.title("Car Milage Data")
p-plt.ylabel("Miles Per Gallon")
p-plt.xlabel("Number of Cylinders")
p-plt.show()


# SEE BOX PLOT OF ONE COLUMN
r-boxplot(mtcars$mpg)
p-plt.boxplot(mtcars['mpg'])

# ITS A PICTURE OF THE SUMMARY DATA!
r-summary(mtcars)
p-mtcars.describe()

# WHAT DOES PLOT ON A EXCEL FILE DO???
r-plot(mtcars)
p-mtcars.plot(**karg)

# CAN WE PLOT ONLY ONE COLUMN?
r-plot(mtcars$mpg)
p-plt.plot(mtcars['mpg'])

# CAN WE PLOT 2 COLUMNS?
r-plot(mtcars$mpg,mtcars$disp)
p-plt.scatter(mtcars['mpg'],mtcars['disp'])


#LETS ADD LABELS AND MAKE DOTS BIGGER
r-plot(mtcars$wt, mtcars$mpg, main="Scatterplot Example", xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
p-plt.scatter(mtcars['mpg'],mtcars['disp'], marker= 'x')
p-plt.title('Scatterplot Example')
p-plt.xlabel('Car weight')
p-plt.ylabel('Miles per Gallon')
p-plt.show()

# ADD A REGRESSION LINE!
r-abline(lm(mtcars$mpg~mtcars$wt), col="red") # regression line (y~x)
p-fit = numpy.polyfit(mtcars['wt'],  mtcars['mpg'],1)
p-fit_fn = numpy.poly1d(fit)
p-plt.plot( mtcars['wt'], mtcars['mpg'], 'o', mtcars['wt'], fit_fn(mtcars['wt']))
p-plt.show()

